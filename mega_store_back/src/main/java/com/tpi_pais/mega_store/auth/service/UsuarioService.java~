package com.tpi_pais.mega_store.auth.service;

import com.tpi_pais.mega_store.auth.dto.PerfilDTO;
import com.tpi_pais.mega_store.auth.dto.UsuarioDTO;
import com.tpi_pais.mega_store.auth.mapper.UsuarioMapper;
import com.tpi_pais.mega_store.auth.model.Rol;
import com.tpi_pais.mega_store.auth.model.Sesion;
import com.tpi_pais.mega_store.auth.model.Usuario;
import com.tpi_pais.mega_store.auth.repository.UsuarioRepository;
import com.tpi_pais.mega_store.exception.BadRequestException;
import com.tpi_pais.mega_store.exception.MessagesException;
import com.tpi_pais.mega_store.exception.NotFoundException;
import com.tpi_pais.mega_store.products.service.VentaService;
import com.tpi_pais.mega_store.utils.EmailCodigoValidacion;
import com.tpi_pais.mega_store.utils.ExpresionesRegulares;
import com.tpi_pais.mega_store.utils.StringUtils;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
@Service
public class UsuarioService implements IUsuarioService{

    private final UsuarioRepository modelRepository;

    private final ExpresionesRegulares expReg;

    private final StringUtils StringUtils;

    private final IRolService rolService;

    private final ISesionService sesionService;

    private final WebClient webClient;

    private final UsuarioMapper mapper;

    private final VentaService ventaService;

    public UsuarioService(
            UsuarioRepository modelRepository,
            ExpresionesRegulares expReg,
            StringUtils stringUtils,
            RolService rolService,
            SesionService sesionService,
            WebClient webClient, UsuarioMapper mapper, VentaService ventaService) {
        this.modelRepository = modelRepository;
        this.expReg = expReg;
        this.StringUtils = stringUtils;
        this.rolService = rolService;
        this.sesionService = sesionService;
        this.webClient = webClient;
        this.mapper = mapper;
        this.ventaService = ventaService;
    }

    public UsuarioService(UsuarioRepository usuarioRepository, ExpresionesRegulares expReg, Object stringUtils, RolService rolService, Object sesionService, Object webClient) {
    }

    @Override
    public List<UsuarioDTO> listar() {
        /*
        *  Trae todos los usuarios activos y no eliminados en orden ascendente
        * */
        List<Usuario> categorias = modelRepository.findByFechaEliminacionIsNullAndVerificadoTrueOrderByIdAsc();
        return categorias.stream().map(UsuarioMapper::toDTO).toList();
    }

    @Override
    public Usuario buscarPorId(Integer id) {
        /*
         * Trae el usuario por su id si no lo encuentra lanza una excepcion
         * Si esta eliminado o inactivo lanza una excepcion
         * */
        Optional<Usuario> model = modelRepository.findByFechaEliminacionIsNullAndVerificadoTrueAndId(id);
        if (model.isEmpty()) {
            throw new NotFoundException(MessagesException.OBJECTO_NO_ENCONTRADO);
        }
        return model.get();
    }

    @Override
    public Usuario buscarEliminadoPorId(Integer id) {
        /*
         * Trae el usuario por su id si no lo encuentra lanza una excepcion
         * Si esta eliminado o no verificado lanza una excepcion
         * */
        Optional<Usuario> model = modelRepository.findById(id);
        if (model.isEmpty()) {
            throw new NotFoundException(MessagesException.OBJECTO_INEXISTENTE);
        }
        if (!model.get().esEliminado()) {
            throw new NotFoundException(MessagesException.OBJECTO_NO_ELIMINADO);
        }
        return model.get();
    }

    @Override
    public Usuario buscarPorEmail(String email) {
        /*
         * Trae el usuario por su email si no lo encuentra lanza una excepcion
         * Si esta eliminado o no verificado lanza una excepcion
         * */
        Optional<Usuario> model = modelRepository.findByFechaEliminacionIsNullAndVerificadoTrueAndEmail(email);
        if (model.isEmpty()) {
            throw new NotFoundException(MessagesException.OBJECTO_NO_ENCONTRADO);
        }
        return model.get();
    }
    @Override
    public Usuario buscarEliminadoPorEmail(String email) {
        /*
         * Trae el usuario por su email si no lo encuentra lanza una excepcion
         * Si esta eliminado o inactivo lanza una excepcion
         * */
        Optional<Usuario> model = modelRepository.findByEmail(email);
        if (model.isEmpty()) {
            throw new NotFoundException(MessagesException.OBJECTO_INEXISTENTE);
        }
        if (!model.get().esEliminado()) {
            throw new NotFoundException(MessagesException.OBJECTO_NO_ELIMINADO);
        }
        return model.get();
    }

    @Override
    public UsuarioDTO guardar(UsuarioDTO modelDTO) {
        /*
         * Guarda un usuario a partir de un DTO
         * */
        Usuario model = UsuarioMapper.toEntity(modelDTO);
        return UsuarioMapper.toDTO(modelRepository.save(model));
    }
    @Override
    public Usuario guardar(Usuario model) {
        /*
         * Guarda un usuario a partir de un modelo
         * */
        return modelRepository.save(model);
    }

    @Override
    public void eliminar(Usuario model) {
        /*
         * Elimina un usuario a partir de un modelo y si ya fue eliminado lanza una excepcion
         * */
        if (model.esEliminado()) {
            throw new BadRequestException(MessagesException.OBJECTO_ELIMINADO);
        }
        model.eliminar();
        modelRepository.save(model);
    }
    @Override
    public void recuperar(Usuario model) {
        /*
         * Recupera un usuario a partir de un modelo y si ya fue recuperado lanza una excepcion
         * */
        if (!model.esEliminado()) {
            throw new BadRequestException(MessagesException.OBJECTO_NO_ELIMINADO);
        }
        model.recuperar();
        modelRepository.save(model);
    }

    @Override
    public Boolean checkPassword(Usuario model, String password) {
        /*
         * Verifica si la contrase;a enviada coincide con la original
         * Si la contrase;a no coincide lanza una excepcion
         * Si la contrase;a es nula lanza una excepcion
         * */
        this.StringUtils.verificarExistencia(password,"password");
        if (model.checkPassword(password)) {
            return true;
        } else {
            throw new BadRequestException(MessagesException.CONTRASENA_INCORRECTA);
        }

    }

    @Override
    public void setPassword(Usuario model, String password) {
        /*
         * Modifica la contrase;a de un usuario
         * si la contrase;a es nula lanza una excepcion
         * Si la contrase;a enviada no coincide con la original lanza una excepcion
         * */
        this.StringUtils.verificarExistencia(password,"password");
        if (model.checkPassword(password)) {
            model.setPassword(password);
            modelRepository.save(model);
        } else {
            throw new BadRequestException(MessagesException.CONTRASENA_INCORRECTA);
        }

    }

    @Override
    public void verificarAtributos(UsuarioDTO modelDTO) {
        // Nombre: Verifico y lo corrijo
        this.verificarNombre(modelDTO.getNombre(), "POST");
        // Email
        this.verificarEmail(modelDTO.getEmail());
        // Numero de Telefono
        if (modelDTO.getTelefono() != null && !Objects.equals(modelDTO.getTelefono(), "")){
            this.verificarTelefono(modelDTO.getTelefono(), "POST");
        }
        // Direccion de envio: Verifico y lo corrijo
        if (modelDTO.getDireccionEnvio() != null && !Objects.equals(modelDTO.getDireccionEnvio(), "")){
            this.verificarDireccion(modelDTO.getDireccionEnvio(), "POST");
        }
        //Rol
        this.verificarRol(modelDTO.getRolId());
        //Password
        this.verificarPassword(modelDTO.getPassword());
    }

    @Override
    public void verificarNombre(String nombre, String metodo) {
        if (Objects.equals(metodo, "POST")){
            this.StringUtils.verificarExistencia(nombre, "nombre");
        }

        if (!this.expReg.verificarCaracteres(nombre)){
            throw new BadRequestException(MessagesException.CARACTERES_INVALIDOS+"Nombre");
        }
        if (Objects.equals(this.expReg.corregirCadena(nombre), "")){
            throw new BadRequestException(MessagesException.FORMATO_INVALIDO+"Nombre");
        }
        this.StringUtils.verificarLargo(nombre, 1, 100, "nombre");
    }

    @Override
    public void verificarEmail(String email) {
        this.StringUtils.verificarExistencia(email, "email");
        if (!this.expReg.verificarEmail(email)){
            throw new BadRequestException(MessagesException.FORMATO_INVALIDO+"Email");
        }
        if (this.emailUtilizado(email)){
            throw new BadRequestException(MessagesException.EMAIL_UTILIZADO);
        }
        this.StringUtils.verificarLargo(email, 1, 100, "email");
    }

    @Override
    public boolean emailUtilizado (String email) {
        return modelRepository.findByEmail(email).isPresent();
    }


    @Override
    public void verificarTelefono(String telefono, String metodo) {
        if (telefono != null){
            this.StringUtils.verificarExistencia(telefono, "telefono");
            if (!this.expReg.verificarNumeros(telefono)){
                throw new BadRequestException(MessagesException.FORMATO_INVALIDO+"Telefono");
            }
            this.StringUtils.verificarLargo(telefono, 1, 15, "telefono");
        }
    }

    @Override
    public void verificarDireccion(String direccion, String metodo) {
        if (direccion != null || direccion != ""){
            this.StringUtils.verificarExistencia(direccion, "direccion");
            if (!this.expReg.verificarCaracteres(direccion)){
                throw new BadRequestException(MessagesException.CARACTERES_INVALIDOS+"Direccion");
            }
            if (Objects.equals(this.expReg.corregirCadena(direccion), "")){
                throw new BadRequestException(MessagesException.FORMATO_INVALIDO+"Direccion");
            }
            this.StringUtils.verificarLargo(direccion, 1, 100, "direccion");
        }
    }

    @Override
    public void verificarRol(Integer rol) {
        if (rol == null){
            throw new BadRequestException(MessagesException.CAMPO_NO_ENVIADO+"Rol");
        }
        if (!this.expReg.verificarNumeros(String.valueOf(rol))){
            throw new BadRequestException(MessagesException.FORMATO_INVALIDO+"Rol");
        }
        Rol r = rolService.buscarPorId(rol);
    }

    @Override
    public void verificarPassword(String password) {
        if (Objects.equals(password, "")){
            throw new BadRequestException(MessagesException.CAMPO_NO_ENVIADO+"Password");
        }
        /*
        * Requisitos:
        * - Min 8 caracteres
        * - Una letra mayuscula
        * - Una letra minuscula
        * - Un numero
        *
        * */
        if (!this.expReg.verificarPassword(password)){
            throw new BadRequestException(MessagesException.FORMATO_INVALIDO+"Password");
        }
        this.StringUtils.verificarLargo(password, 8, 100, "password");
    }

    @Override
    public Usuario crearUsuario (UsuarioDTO modelDTO){
        //Creo el usuario
        Usuario model = new Usuario();
        //Nombre
        model.setNombre(this.expReg.corregirCadena(modelDTO.getNombre()));
        //Email
        model.setEmail(modelDTO.getEmail());
        //Telefono
        if (modelDTO.getTelefono() != null && !Objects.equals(modelDTO.getTelefono(), "")){
            model.setTelefono(modelDTO.getTelefono());
        } else {
            model.setTelefono(null);
        }
        //Direccion
        if (modelDTO.getDireccionEnvio() != null && !Objects.equals(modelDTO.getDireccionEnvio(), "")){
            model.setDireccionEnvio(this.expReg.corregirCadena(modelDTO.getDireccionEnvio()));
        }else {
            model.setDireccionEnvio(null);
        }
        //Rol
        model.setRol(rolService.buscarPorId(modelDTO.getRolId()));
        //Fecha Creacion
        model.setFechaCreacion();
        //Codigo Verificacion
        model.setCodigoVerificacion();
        model.setVerificado(false);
        //Password
        model.setPassword(modelDTO.getPassword());
        // Guardo el model
        return this.guardar(model);
    }

    @Override
    public void enviarCodigoVerificacion(String email, String codigoVerificacion) {
        try {
            String requestBody = getString(email, codigoVerificacion);

            // Token de autorización (reemplaza "your-token" por el token real)
            String token = "48cd4db4cf2acbb1a532528b71fadb202efe8af8";

            // Realizar la solicitud POST para enviar el correo
            String response = String.valueOf(webClient.post()
                    .uri("/emailSender/enviar/")  // Especifica el endpoint correcto
                    .header("Content-Type", "application/json")
                    .header("Authorization", "Token " + token)  // Agrega el token al encabezado
                    .bodyValue(requestBody)  // Cuerpo de la solicitud con los datos de email y código
                    .retrieve()
                    .toEntity(String.class)
                    .doOnTerminate(() -> {
                    })
                    .doOnError(error -> {
                    })
                    .block());  // Espera la respuesta sin bloquear el hilo principal

        } catch (Exception e) {
            throw new BadRequestException("Error al enviar el email: " + e.getMessage());
        }
    }

    private static String getString(String email, String codigoVerificacion) {
        String emailHtmlTemplate = EmailCodigoValidacion.emailHtmlTemplate;
        // Reemplaza las variables en la plantilla HTML
        String emailContent = emailHtmlTemplate
                .replace("{LOGO_URL}", EmailCodigoValidacion.logoUrl)
                .replace("{CODIGO_VERIFICACION}", codigoVerificacion);

        // Aquí escapamos las comillas dobles dentro del contenido HTML
        String escapedEmailContent = emailContent.replace("\"", "\\\"");

        // Aquí formateamos el JSON correctamente
        return String.format("""
        {
            "destinatario": "%s",
            "asunto": "Código de verificación",
            "cuerpo": "%s"
        }
        """, email, escapedEmailContent);
    }


    @Override
    public void verificarCodigoVerificacion(String email, String codigoVerificacion){
        Optional<Usuario> model = modelRepository.findByEmail(email);
        if (model.isEmpty()) {
            throw new NotFoundException(MessagesException.OBJECTO_INEXISTENTE);
        }

        if (model.get().getVerificado()) {
            throw new BadRequestException(MessagesException.OBJETO_ACTIVO);
        }
        if (Duration.between(model.get().getFechaCreacion(), LocalDateTime.now()).toMinutes() > 15) {
            throw new BadRequestException(MessagesException.CODIGO_ACTIVACION_EXPIRADO);

        }
        if (model.get().getCodigoVerificacion().equals(codigoVerificacion)) {
            model.get().setVerificado(true);
            model.get().setCodigoVerificacion(null);
            modelRepository.save(model.get());
        }
        else {
            throw new BadRequestException(MessagesException.CODIGO_ACTIVACION_INCORRECTO);
        }
    }

    @Override
    public Sesion login (UsuarioDTO usuarioDto) {
        Optional<Usuario> usuario = Optional.ofNullable(this.buscarPorEmail(usuarioDto.getEmail()));
        if (usuario.isEmpty()) {
            throw new NotFoundException(MessagesException.OBJECTO_INEXISTENTE);
        }
        if (!this.checkPassword(usuario.get(), usuarioDto.getPassword())) {
            throw new BadRequestException(MessagesException.CONTRASENA_INCORRECTA);
        }
        return this.sesionService.obtenerSesionActual(usuario.get());
    }


    @Override
    public void reenviarCodigo (String email) {
        if (email == null || email.isEmpty()) {
            throw new BadRequestException("El email no puede estar vacio.");
        }
        Optional<Usuario> usuario = this.modelRepository.findByEmail(email);
        System.out.println(usuario);
        if (usuario.isEmpty()) {
            throw new NotFoundException("El usuario no existe.");
        }
        if (usuario.get().esEliminado()) {
            throw new BadRequestException("El usuario se encuentra eliminado.");
        }
        if (!usuario.get().getVerificado()) {
            usuario.get().setCodigoVerificacion();
            usuario.get().setFechaCreacion();
            this.enviarCodigoVerificacion(email, usuario.get().getCodigoVerificacion());
            modelRepository.save(usuario.get());
        }else {
            throw new BadRequestException("No se puede reenviar el codigo, debido a que el usuario se encuentra verificado.");
        }
    }

    @Override
    public void recuperarContrasena(String email) {
        if (email == null || email.isEmpty()) {
            throw new BadRequestException("El email no puede estar vacio.");
        }
        System.out.println(email);
        Usuario usuario = this.buscarPorEmail(email);
        if (usuario.esEliminado()) {
            throw new BadRequestException("El usuario se encuentra eliminado.");
        }
        if (!usuario.getVerificado()) {
            throw new BadRequestException("El usuario no se encuentra verificado.");
        }
        usuario.setCodigoRecuperacion();
        modelRepository.save(usuario);
        this.enviarCodigoRecuperacion(email,usuario.getCodigoRecuperacion());
    }



    public void enviarCodigoRecuperacion  (String email, String codigoRecuperacion) {
        try {
            String requestBody = getStringR(email, codigoRecuperacion);

            // Token de autorización (reemplaza "your-token" por el token real)
            String token = "48cd4db4cf2acbb1a532528b71fadb202efe8af8";

            // Realizar la solicitud POST para enviar el correo
            String response = String.valueOf(webClient.post()
                    .uri("/emailSender/enviar/")  // Especifica el endpoint correcto
                    .header("Content-Type", "application/json")
                    .header("Authorization", "Token " + token)  // Agrega el token al encabezado
                    .bodyValue(requestBody)  // Cuerpo de la solicitud con los datos de email y código
                    .retrieve()
                    .toEntity(String.class)
                    .doOnTerminate(() -> {
                    })
                    .doOnError(error -> {
                    })
                    .block());  // Espera la respuesta sin bloquear el hilo principal

        } catch (Exception e) {
            throw new BadRequestException("Error al enviar el email: " + e.getMessage());
        }
    }
    private static String getStringR (String email, String codigoVerificacion) {
        String emailHtmlTemplate = EmailCodigoValidacion.passwordResetEmailTemplate;
        // Reemplaza las variables en la plantilla HTML
        String emailContent = emailHtmlTemplate
                .replace("{LOGO_URL}", EmailCodigoValidacion.logoUrl)
                .replace("{CODIGO_RECUPERACION}", codigoVerificacion);

        // Aquí escapamos las comillas dobles dentro del contenido HTML
        String escapedEmailContent = emailContent.replace("\"", "\\\"");

        // Aquí formateamos el JSON correctamente
        return String.format("""
        {
            "destinatario": "%s",
            "asunto": "Código de Recuperacion de Contraseña",
            "cuerpo": "%s"
        }
        """, email, escapedEmailContent);
    }

    @Override
    public boolean validarCodigoRecuperacion(String email, String codigoRecuperacion) {
        if (email == null || email.isEmpty()) {
            throw new BadRequestException("El email no puede estar vacio.");
        }
        Usuario usuario = this.buscarPorEmail(email);
        if (usuario.esEliminado()) {
            throw new BadRequestException("El usuario se encuentra eliminado.");
        }
        if (!usuario.getVerificado()) {
            throw new BadRequestException("El usuario no se encuentra verificado.");
        }

        if (!usuario.getCodigoRecuperacion().equals(codigoRecuperacion)) {
            return false;
        }
        return true;
    }

    @Override
    public void restablecerContrasena(String email, String password, String codigoRecuperacion) {
        if (email == null || email.isEmpty()) {
            throw new BadRequestException("El email no puede estar vacio.");
        }
        Usuario usuario = this.buscarPorEmail(email);
        if (usuario.esEliminado()) {
            throw new BadRequestException("El usuario se encuentra eliminado.");
        }
        if (!usuario.getVerificado()) {
            throw new BadRequestException("El usuario no se encuentra verificado.");
        }
        if (!usuario.getCodigoRecuperacion().equals(codigoRecuperacion)) {
            throw new BadRequestException("Se necesita el codigo de recuperacion.");
        }
        usuario.setPassword(password);
        modelRepository.save(usuario);
    }
    @Override
    public PerfilDTO getPerfil(Integer id) {
        Usuario usuario = buscarPorId(id);
        PerfilDTO perfil = mapper.toDTOPerfil(usuario);
        perfil.setVentas(ventaService.listarPorUsuario(usuario.getId()));
        return perfil;
    }
}
